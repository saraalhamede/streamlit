{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "cd709908-b2b2-46a3-bbe1-8910d433bee9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Running prompt on llama3.2:3b...\n",
      "\n",
      "Running prompt on tinyllama:latest...\n",
      "\n",
      "Running prompt on llama3.2:3b...\n",
      "\n",
      "Running prompt on tinyllama:latest...\n",
      "\n",
      "Running prompt on llama3.2:3b...\n",
      "\n",
      "Running prompt on tinyllama:latest...\n",
      "\n",
      "Running prompt on llama3.2:3b...\n",
      "\n",
      "Running prompt on tinyllama:latest...\n",
      "\n",
      "Running prompt on llama3.2:3b...\n",
      "\n",
      "Running prompt on tinyllama:latest...\n",
      "\n",
      "游릭 Prompt: What is the capital of Australia?\n",
      "\n",
      "游댯 llama3.2:3b:\n",
      "\n",
      "\n",
      "游댯 tinyllama:latest:\n",
      "The capital of Australia is Canberra, located in the nation's Capital Territory.\n",
      "\n",
      "游릭 Prompt: Explain the difference between TCP and UDP.\n",
      "\n",
      "游댯 llama3.2:3b:\n",
      "\n",
      "\n",
      "游댯 tinyllama:latest:\n",
      "In computer networking, there are two main protocols for transmitting data:\n",
      "\n",
      "1. Transmission Control Protocol (TCP) - This is used to establish a connection between two hosts, ensure data transmission reliability, and protect against packet loss and other communication errors. It provides a layer of abstraction for handling complex network traffic.\n",
      "\n",
      "2. User Datagram Protocol (UDP) - UDP is an unreliable protocol that does not guarantee the delivery or retransmission of data packets. It is used to send small packets of information, such as data files, over a computer network. It is not meant for high-speed connections and can be less reliable than TCP.\n",
      "\n",
      "In summary, TCP provides higher reliability and guarantees the transmission of data, while UDP is designed for less critical applications or where reliability cannot be guaranteed.\n",
      "\n",
      "游릭 Prompt: What is 17 multiplied by 19?\n",
      "\n",
      "游댯 llama3.2:3b:\n",
      "\n",
      "\n",
      "游댯 tinyllama:latest:\n",
      "17 * 19 = 268\n",
      "This means that 17 times 19 equals 268.\n",
      "\n",
      "游릭 Prompt: Who wrote the novel \"1984\"?\n",
      "\n",
      "游댯 llama3.2:3b:\n",
      "\n",
      "\n",
      "游댯 tinyllama:latest:\n",
      "\"1984,\" written by George Orwell, was first published in 1949 and is considered to be one of the most influential dystopian novels ever written. The book tells the story of a future totalitarian state where all personal freedoms have been abolished and replaced with a one-party government known as the Oceania. It's a bleak and compelling vision of the future, depicting society as dominated by propaganda, surveillance, and mind-numbing conformity.\n",
      "\n",
      "游릭 Prompt: Summarize the causes of World War I.\n",
      "\n",
      "游댯 llama3.2:3b:\n",
      "\n",
      "\n",
      "游댯 tinyllama:latest:\n",
      "The causes of World War I, also known as the Great War or the Great Powder War, were a series of conflicts that began in 1914 between Central and Eastern European states and led to their unification into the German-led First World War (also known as the Great War). The main reasons for this war are summarized below.\n",
      "\n",
      "1. Diverging Economic Interests: In 1907, Germany began to expand its territory by annexing Austria's Sudetenland region in the Czechoslovakian borderlands. This led to a sense of anger and frustration among Germans who saw Austria as an ally rather than a foe. The expansionist policy also strained relations between the two countries, which had previously been close.\n",
      "\n",
      "2. Imperialism: The German Empire's expansionist policies had put pressure on other European powers to do likewise. In 1904, Germany unsuccessfully attempted to annex the Duchy of Luxembourg; a few years later, France and the United Kingdom also began their own territorial claims in Africa.\n",
      "\n",
      "3. Diplomatic Crisis: The diplomatic crisis between Austria-Hungary and Serbia over the sacking of the town of Sarajevo in 1908 resulted in an international declaration of war between Austria-Hungary and Russia on April 2, 1914. This prompted Germany to declare war on July 28th, leading to a series of conflicts that ended with the signing of the Treaty of Brest-Litovsk on February 3rd, 1918.\n",
      "\n",
      "4. Military Expansion: The German Empire's military expansions into Austria in 1915 and Russia in 1916 increased tensions between Germany and its allies, leading to the outbreak of war in July 1914.\n",
      "\n",
      "These factors combined to lead to World War I, where Germany successfully mobilized a large army against the Entente Powers (France, Britain, and Russia) and won a major victory at the battle of the Marne on September 25th, 1914.\n"
     ]
    }
   ],
   "source": [
    "import subprocess\n",
    "\n",
    "MODELS = [\"llama3.2:3b\", \"tinyllama:latest\"]\n",
    "\n",
    "\n",
    "def call_ollama2(model, prompt):\n",
    "    try:\n",
    "        result = subprocess.run(\n",
    "            [\"ollama\", \"run\", model, \"-p\", prompt],\n",
    "            capture_output=True,\n",
    "            text=True,\n",
    "            timeout=60  # avoid hanging\n",
    "        )\n",
    "        return result.stdout.strip()\n",
    "    except subprocess.TimeoutExpired:\n",
    "        return \"[ERROR: Timeout]\"\n",
    "    except Exception as e:\n",
    "        return f\"[ERROR: {e}]\"\n",
    "\n",
    "def call_ollama(model, prompt) -> str:\n",
    "    try:\n",
    "        result = subprocess.run(\n",
    "            [\"ollama\", \"run\", model],\n",
    "            input=prompt.encode(\"utf-8\"),\n",
    "            stdout=subprocess.PIPE,\n",
    "            stderr=subprocess.PIPE,\n",
    "            timeout=30\n",
    "        )\n",
    "        return result.stdout.decode(\"utf-8\").strip()\n",
    "    except subprocess.TimeoutExpired:\n",
    "        return \"Unknown\"\n",
    "        \n",
    "def evaluate_responses(prompts):\n",
    "    results = []\n",
    "    for prompt in prompts:\n",
    "        row = {\"prompt\": prompt}\n",
    "        for model in MODELS:\n",
    "            print(f\"\\nRunning prompt on {model}...\")\n",
    "            output = call_ollama(model, prompt)\n",
    "            row[model] = output\n",
    "        results.append(row)\n",
    "    return results\n",
    "\n",
    "def print_side_by_side(results):\n",
    "    for r in results:\n",
    "        print(f\"\\n游릭 Prompt: {r['prompt']}\")\n",
    "        for model in MODELS:\n",
    "            print(f\"\\n游댯 {model}:\\n{r[model]}\")\n",
    "\n",
    "def main():\n",
    "    with open(\"prompts.txt\") as f:\n",
    "        prompts = [line.strip() for line in f if line.strip()]\n",
    "    \n",
    "    results = evaluate_responses(prompts)\n",
    "    print_side_by_side(results)\n",
    "\n",
    "main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7363c2e9-51e0-4359-8752-98bb51cb2e7d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BLEU score: 0.2056\n"
     ]
    }
   ],
   "source": [
    "from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction\n",
    "\n",
    "# Reference sentence(s) - as list of word lists\n",
    "reference = [[\"the\", \"cat\", \"is\", \"on\", \"the\", \"mat\"]]\n",
    "\n",
    "# Candidate sentence (generated by LLM)\n",
    "candidate = [\"the\", \"cat\", \"the\", \"cat\", \"on\", \"the\", \"mat\"]\n",
    "\n",
    "# Apply smoothing to avoid 0 scores on short text\n",
    "smoother = SmoothingFunction().method1\n",
    "\n",
    "# Compute BLEU score using up to 4-grams\n",
    "score = sentence_bleu(reference, candidate, smoothing_function=smoother)\n",
    "\n",
    "print(f\"BLEU score: {score:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bc743e8d-f720-4555-b1aa-fb31d92a8dda",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rouge1:\n",
      "  Precision: 0.5714\n",
      "  Recall:    0.6667\n",
      "  F1 score:  0.6154\n",
      "rouge2:\n",
      "  Precision: 0.3333\n",
      "  Recall:    0.4000\n",
      "  F1 score:  0.3636\n",
      "rougeL:\n",
      "  Precision: 0.5714\n",
      "  Recall:    0.6667\n",
      "  F1 score:  0.6154\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    from rouge_score import rouge_scorer\n",
    "except ImportError:\n",
    "    %pip install rouge-score\n",
    "    from rouge_score import rouge_scorer\n",
    "    \n",
    "# Create a scorer for ROUGE-1, ROUGE-2, and ROUGE-L\n",
    "scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)\n",
    "\n",
    "# Reference (human-written) and Candidate (generated) texts\n",
    "reference = \"The cat sat on the mat.\"\n",
    "candidate = \"The cat lay on the dirty rug.\"\n",
    "\n",
    "# Compute ROUGE scores\n",
    "scores = scorer.score(reference, candidate)\n",
    "\n",
    "# Print results\n",
    "for metric, score in scores.items():\n",
    "    print(f\"{metric}:\")\n",
    "    print(f\"  Precision: {score.precision:.4f}\")\n",
    "    print(f\"  Recall:    {score.recall:.4f}\")\n",
    "    print(f\"  F1 score:  {score.fmeasure:.4f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e86d362-aa97-476d-8e31-5aa11d8e88e9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0477831-2858-4a99-9ec4-47e6d1de8730",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e53bb6b-94e8-4a11-a173-1cda91922746",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
